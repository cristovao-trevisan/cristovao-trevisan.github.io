{"version":3,"file":"chunk.7199e491.js","sources":["../../../../node_modules/svelte/store.mjs"],"sourcesContent":["import { noop, safe_not_equal, run_all, is_function } from './internal';\n\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (!stop) {\n                return; // not ready\n            }\n            subscribers.forEach((s) => s[1]());\n            subscribers.forEach((s) => s[0](value));\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\n/**\n * Derived value store by synchronizing one or more readable stores and\n * applying an aggregation function over its input values.\n * @param {Stores} stores input stores\n * @param {function(Stores=, function(*)=):*}fn function callback that aggregates the values\n * @param {*=}initial_value when used asynchronously\n */\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => store.subscribe((value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n/**\n * Get the current value from a store by subscribing and immediately unsubscribing.\n * @param store readable\n */\nfunction get(store) {\n    let value;\n    store.subscribe((_) => value = _)();\n    return value;\n}\n\nexport { readable, writable, derived, get };\n"],"names":["readable","value","start","subscribe","writable","stop","noop","subscribers","set","new_value","safe_not_equal","forEach","s","update","fn","run","subscriber","push","length","index","indexOf","splice"],"mappings":"+CAOA,SAASA,EAASC,EAAOC,SACd,CACHC,UAAWC,EAASH,EAAOC,GAAOC,WAQ1C,SAASC,EAASH,OACVI,EADiBH,yDAAQI,EAEvBC,EAAc,YACXC,EAAIC,MACLC,EAAeT,EAAOQ,GAAY,IAClCR,EAAQQ,GACHJ,SAGLE,EAAYI,QAAQ,SAACC,UAAMA,EAAE,OAC7BL,EAAYI,QAAQ,SAACC,UAAMA,EAAE,GAAGX,YAuBjC,CAAEO,IAAAA,EAAKK,gBApBEC,GACZN,EAAIM,EAAGb,KAmBWE,mBAjBHY,OACTC,EAAa,CAACD,yDADaT,UAEjCC,EAAYU,KAAKD,GACU,IAAvBT,EAAYW,SACZb,EAAOH,EAAMM,IAAQF,GAEzBS,EAAId,GACG,eACGkB,EAAQZ,EAAYa,QAAQJ,IACnB,IAAXG,GACAZ,EAAYc,OAAOF,EAAO,GAEH,IAAvBZ,EAAYW,QACZb"}